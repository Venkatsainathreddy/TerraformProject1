provider "aws" {
  region     = "ap-south-1"
  access_key = "Give your AWS access key"
  secret_key = "Give your AWS secret key"
}
    


resource "aws_security_group" "allow_traffic" {
  name        = "allow_http"
  description = "Allow TLS inbound traffic"
  


  ingress {
    description = "HTTP from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


  ingress {
     description = "SSH from VPC"
     from_port   = 22
     to_port     = 22
     protocol    = "tcp"
     cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
     description = "ping"
     from_port   = -1
     to_port     = -1
     protocol    = "icmp"
     cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
tags = {
    Name = "allow_http"
  }
}
resource "aws_instance" "web" {
  ami             = "ami-0447a12f28fddb066"
  instance_type   = "t2.micro"
  key_name        = "websitekey"
  security_groups = ["allow_http"]


 connection {
        type     = "ssh"
        user     = "ec2-user"
        private_key = file("C:/Users/Sainath Reddy/Downloads/websitekey.pem")
        host     = aws_instance.web.public_ip
     }

 provisioner "remote-exec" {
        inline = [
          "sudo yum install httpd git -y",
          "sudo systemctl restart httpd",
          "sudo systemctl enable httpd",
    ]
  }
    tags = {
      Name = "mywebos"
    }
}

resource "aws_ebs_volume" "myebs_vol" {
    availability_zone = aws_instance.web.availability_zone
    size              = 1
    type = "gp2"
    tags = {
        Name = "myVol"
    }
}


resource "aws_volume_attachment" "ebs_attach" {
    device_name = "/dev/sdh"
    volume_id   = aws_ebs_volume.myebs_vol.id
    instance_id = aws_instance.web.id
    force_detach = true
 }

resource "null_resource" "nullremote"  {


    depends_on = [
       aws_volume_attachment.ebs_attach,
   ]


    connection {
        type     = "ssh"
        user     = "ec2-user"
        private_key = file("C:/Users/Sainath Reddy/Downloads/websitekey.pem")
        port    = 22
        host     = aws_instance.web.public_ip
   }


  provisioner "remote-exec" {
      inline = [
          "sudo mkfs.ext4  /dev/xvdh",
          "sudo mount  /dev/xvdh  /var/www/html",
          "sudo rm -rf /var/www/html/*",
          "sudo git clone https://github.com/Venkatsainathreddy/website.git /var/www/html/"
     ]
   }
 }

resource "aws_s3_bucket" "my_pic_bucket15934567" {
     bucket  = "sainathimages"
     acl     = "public-read"
   
     versioning {
          enabled = true
      }
     tags = {
        Name = "my-new-bucket"
        Environment = "Dev"
    }
}
locals {
    s3_origin_id = "my_pic_bucket15934567Origin"
}

resource "aws_s3_bucket_object" "s3obj" {
depends_on = [
  aws_s3_bucket.my_pic_bucket15934567,
]
  bucket       = "sainathimages"
  key          = "download.jpg"
  source       = "C:/Users/Sainath Reddy/Desktop/download.jpg"
  acl          = "public-read"
  content_type = "image or jpeg"
}



resource "aws_cloudfront_distribution" "s3_distribution" {
  origin {
    domain_name = aws_s3_bucket.my_pic_bucket15934567.bucket_regional_domain_name
    origin_id   = local.s3_origin_id
}
enabled             = true
  is_ipv6_enabled     = true
  comment             = "Some comment"
  default_root_object = "website.html"
logging_config {
    include_cookies = false
    bucket          = "sainathimages.s3.amazonaws.com"
    prefix          = "myprefix"
  }
default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id
forwarded_values {
      query_string = false
cookies {
        forward = "none"
      }
    }
viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }
ordered_cache_behavior {
    path_pattern     = "/content/immutable/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = local.s3_origin_id
forwarded_values {
      query_string = false
      headers      = ["Origin"]
cookies {
        forward = "none"
      }
    }
min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }
ordered_cache_behavior {
    path_pattern     = "/content/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id
forwarded_values {
      query_string = false
cookies {
        forward = "none"
      }
    }
min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }
price_class = "PriceClass_200"
restrictions {
    geo_restriction {
      restriction_type = "none"
      
    }
  }
tags = {
    Environment = "production"
  }
viewer_certificate {
    cloudfront_default_certificate = true
  }
}
output "cloudfront_ip_addr" {
  value = aws_cloudfront_distribution.s3_distribution.domain_name
}

resource "null_resource" "IP_opening_on_crome"  {
  depends_on = [
    aws_cloudfront_distribution.s3_distribution,
    aws_volume_attachment.ebs_attach
  ]
  provisioner "local-exec" {
    command = "start chrome http://${aws_instance.web.public_ip}/"
   }
}
